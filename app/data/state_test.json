{
    "meta": {
        "id": "0000",
        "ready": false,
        "exitConfirmationIsVisible": false
    },
    "user": {
        "id": "123",
        "name": "Musterfrau"
    },
    "faq": {
        "isVisible": false,
        "data": [
            {
                "question": "Was ist ein Code-Review?",
                "answer": "### Allgemein\n\nCode-Review ist der Prozess der Softwaretechnik zur Qualitätssicherung. Dabei soll überprüft werden, ob das vorliegende Software-Artefakt die gesetzten Qualitäts-Standards erfüllt.\n\n> The core idea is simply to get an expert to examine your work to find problems you can’t see. - Rigby et. al. (2012)\n\nModerne Code-Reviews zeichnen sich dadurch aus, dass es keinen formal definierten Ablauf gibt, sie toolunterstützt durchgeführt werden und möglichst regelmäßig stattfinden. Zudem sind sowohl Bearbeitung als auch Kommunikation typischerweise asynchron.\n\n### Aufgabe des Reviewenden\n\nDie Aufgabe des Reviewers besteht darin, den Code nach verschieden Kriterien zu evaluieren. Beispielsweise nach Code Qualität, dem Einhalten von Style-Guidelines und der Nutzung von sinnvollen Entwurfsmustern. Auch nach unnötiger Komplexität und Bugs wird Ausschau gehalten.\nCode-Reviews haben viele nachweißbare Vorteile, wie z.b. die bessere Lesbarkeit des Codes und einen Wissenstransfer zwischen Reviewer und Autor.\n\n### Weitere Hilfestellungen\n\nViele wichtige Informationen zur Bearbeitung des Code-Reviews findest du unter der Schaltfläche `Aufgabe`.\nNutze auch unbedingt die `Checkliste`, die dich durch das Code-Review begleiten und führen kann.\n\nEin wunderbare Einführung findest du auch auf der Website der [Google Engineering Practives documentation](https://google.github.io/eng-practices/review/reviewer/standard.html)."
            },
            {
                "question": "Wie erstelle ich ein Code-Review?",
                "answer": "Das Vorgehen zur Erstellung eines Code-Reviews lässt sich grundsätzlich in drei größere Schritte aufteilen, die im folgenden beschrieben sind. Diese Arbeitsschritte wurden auch in der `Checkliste` berücksichtigt. Dort findest du auch konkret umsetzbare Anweisungen für das gesamte Code-Review.\n\n\n### 1) Blick aus der Vogelperspektive\n\nAm besten betrachtest du das System zunächst einmal aus der Vogelperspektive. Dabei ist es wichtig sich die **Ziele und Anforderungen** der Anwendung bewusst zu machen. Konsultiere dazu ReadMe-Dateien und allgemeine Anforderungsbeschreibungen.\n\nAnschließend solltest du dir den groben Aufbau der Anwendung ansehen. Dazugehört die verwendete **Software-Architektur**, sowie welche grundsätzlichen **Software-Paradigmen** angewendet wurden. Versuche herauszufinden, welche Funktionen, Technologien und Dateien bzw. Komponenten besonders wichtig sind für die Anwendung.\n\n### 2) Betrachtung der wichtigsten Teilbereiche\n\nFokussiere dein Code-Review zunächst auf die wichtigsten Bereiche der Software und auf die wichtigsten Aspekte. Dabei geht es also nicht um die Rechtschreibung in einem Variablennamen, sondern um grundsätzliche **Design-Entscheidungen und Lösungen**. Betrachte die Software während des Reviews immer im Kontext der Anforderungen. (Beispielsweise sind Performance-Optimierungen im Millisekunden-Bereich für studentische Softwareprojekte weniger wichtig, wie für Airbag-Systeme)\n\n### 3) Code-Review abschließen\n\nWenn die wichtigsten Aspekte bearbeitet wurden besteht Gelegenheit auch Dateien bzw. Komponenten anzuschauen die weniger wichtig sind. Außerdem kannst du die Software nach weniger wichtigeren Kriterien untersuchen und Anmerkungen machen.\n\nPass aber darauf auf dich nicht zu Verzetteln. Es ist vollkommen in Ordnung nach einer bestimmten Zeit, dass Code-Review zu beenden, solange die wichtigsten Punkte untersucht wurden. Es ist grundsätzlich zu empfehlen sich einen **feste Zeitrahmen** für ein Code-Review vorzunehmen und diesen auch einzuhalten.\n\n### Primäre Quelle:\n[Google's Engineering Practices documentation](https://google.github.io/eng-practices/review/reviewer/navigate.html)"
            },
            {
                "question": "Was ist Markdown bzw. Markdown Syntax?",
                "answer": "Markdown bietet die Möglichkeit mit einfachen Symbolen einen Text zu formatieren. Die Formatierungsmöglichkeiten sind dabei stark begrenzt aber umso nützlicher. Formal ist Markdown eine vereinfachte Auszeichnungssprache. Auf dieser Website wird Markdown exzessiv zur einfachen Textformatierung und zum einbinden von Hyperlinks genutzt.\n\n*Die wichtigste Markdown Syntax im Überblick:*\n```\n\n# Erzeugt Header in\n## verschiedenen\n### Größen\n\n- Text kann **fett** oder *kursiv* sein.\n- Genauso kann `code` hervorgehoben werden, oder ein [Link](https://www.ur.de/) eingebunden werden.\nDurch Bindestriche\n\n---\n\nkann ein Trennstrich erzeugt werden.\n\n```\n\n# Erzeugt Header in\n## verschiedenen\n### Größen\n- Text kann **fett** oder *kursiv* sein.\n- Genauso kann `code` hervorgehoben werden, oder ein [Link](https://www.ur.de/) eingebunden werden.\n\nDurch Bindestriche\n\n---\n\n kann ein Trennstrich erzeugt werden."
            },
            {
                "question": "Wie füge ich einen Kommentar zu einer Code-Zeile hinzu?",
                "answer": "Du kannst in jeder Code-Zeile auf den `+` Icon clicken um in dieser Zeile einen Kommentar zu ergänzen.\n\n![graphik dazu](../assets/add_comment.jpg)"
            },
            {
                "question": "Wofür stehen die Kommentar Kategorien?",
                "answer": "- **Bug:** Damit kannst du den Autor oder die Autorin auf einen Syntax oder Logikfehler hinweisen. \n- **Alternative:** Diese Kategorie ist sinnvoll, wenn du einen alternativen Lösungsweg vorschlagen möchtest.\n- **Anmerkung:** Allgemeine Kategorie ohne besondere Bedeutung.\n- **Kompliment:** Jeder freut sich über ein unerwartetes Kompliment, auch in einem Code-Review."
            },
            {
                "question": "Kann ich die Usability-Task-Beschreibung noch einmal lesen?",
                "answer": "**Ja!** Klicke auf die Leiste `Steuerungselemente für Usability-Task einblenden` mittig oben und anschließend auf `Task-Beschreibung`."
            },
            {
                "question": "Verliere ich meinen Fortschritt, wenn ich die Website verlasse?",
                "answer": "**Nein!** Dein Review-Fortschritt wird regelmäßig lokal in deinem Browser gespeichert."
            }
        ]
    },
    "checklist": {
        "isVisible": true,
        "categories": {
            "Vorbereitung": [
                {
                    "id": "11",
                    "label": "Hast du die Aufgabenstellung bzw. Aufgabenbeschreibung ausführlich durchgelesen und verstanden?",
                    "checked": false
                },
                {
                    "id": "12",
                    "label": "Sind die Ziele der Anwendung klar?",
                    "checked": false
                },
                {
                    "id": "13",
                    "label": "Weißst du in welchem Kontext die Anwendung verwendet werden soll?",
                    "checked": false
                }
            ],
            "Vorgehen": [
                {
                    "id": "21",
                    "label": "Ist die grundsätzliche Struktur der Anwendung klar?",
                    "checked": false
                },
                {
                    "id": "22",
                    "label": "Hast du die wichtisten Dateien, Klassen oder Komponenten identifiziert?",
                    "checked": false
                },
                {
                    "id": "23",
                    "label": "Hast du dir die wichtigsten Features oder Entwicklungen bewusst gemacht?",
                    "checked": false
                },
                {
                    "id": "24",
                    "label": "Beachtest du bei deinem Code-Review zunächst die wichtigsten Code-Artefakte?",
                    "checked": false
                },
                {
                    "id": "25",
                    "label": "Nutzt du die Richtlinien *unten*, um den Quellcode zu analysieren?",
                    "checked": false
                }
            ],
            "Richtlinien": [
                {
                    "id": "31",
                    "label": "Wurden bekannte *Coding Guidelines* eingehalten?",
                    "checked": false
                },
                {
                    "id": "32",
                    "label": "Wurden für Variablen und Methoden verständliche und treffend formulierte Bezeichner verwendet?",
                    "checked": false
                },
                {
                    "id": "33",
                    "label": "Folgt der Aufbau des Codes einem nachvollziehbaren und sinnvollen Konzept?",
                    "checked": false
                },
                {
                    "id": "34",
                    "label": "Wurden die verschiedenen Aufgabenbereiche der Software sichtbar und sinnvoll voneinander getrennt?",
                    "checked": false
                },
                {
                    "id": "35",
                    "label": "Wurde auf eine modularisierte Code-Strtuktur, z.B. durch gute *Decomposition* oder wiederverwendbare Methoden und Prototypen geachtet?",
                    "checked": false
                },
                {
                    "id": "36",
                    "label": "Wurde das [MVC-Konzept](https://de.wikipedia.org/wiki/Model_View_Controller) korrekt umgesetzt: Sind Model und UI klar voneinander getrennt?",
                    "checked": false
                },
                {
                    "id": "37",
                    "label": "Wurden kritische oder komplexe Stellen im Code ausreichend kommentiert?",
                    "checked": false
                },
                {
                    "id": "38",
                    "label": "Wurden alle nicht benötigten Teilbereiche des Codes entfernt? Wurden alle Debug-Ausgaben und -Methoden vor der Abgabe entfernt?",
                    "checked": false
                }
            ],
            "Feedback geben": [
                {
                    "id": "40",
                    "label": "**Kompliment:** Hast du besonders guten Code mit einem kleinen positiven Feedback gewürdigt?",
                    "checked": false
                },
                {
                    "id": "41",
                    "label": "**Strukur:** Nutzt dein Feedback die OIR-Regel: *Observation*, *Impact*, *Request*? (siehe: [großartiger Blogeintrag von Philipp Hauer](https://phauer.com/2018/code-review-guidelines/))",
                    "checked": false
                },
                {
                    "id": "42",
                    "label": "**Sprache:** Ist dein Kommentar in freundlicher und respektvoller Sprache verfasst? (eine schöne weiterführende Referenz dazu: [Respectful Code Reviews](https://chromium.googlesource.com/chromium/src/+/master/docs/cr_respect.md)) ",
                    "checked": false
                },
                {
                    "id": "43",
                    "label": "**Respekt:** Würdigt dein Feedback die Mühen und Leistungen des Entwicklers oder der Entwicklerin?",
                    "checked": false
                },
                {
                    "id": "44",
                    "label": "**Erklärung:** Hast du in deinem Kommentar erklärt, warum du diesen Code kommentierst?",
                    "checked": false
                },
                {
                    "id": "45",
                    "label": "**Austausch:** Hast du die Gelegenheit genutzt, um auf nützliche Ressouren zu verweisen?",
                    "checked": false
                },
                {
                    "id": "46",
                    "label": "**Subjekt:** Greifst du in deinem Kommentar den oder die *Entwickler:in* an, oder sprichst du über den *Code*? (Beispiele bei [Google's Engineering Practices documentation](https://google.github.io/eng-practices/review/reviewer/comments.html)",
                    "checked": false
                },
                {
                    "id": "47",
                    "label": "**Empathie:** Wird in deinem Feedback deutlich, dass du aus deiner Perspektive aus sprichst?",
                    "checked": false
                },
                {
                    "id": "48",
                    "label": "**Wahrheitsanspruch:** Gibt dein Feedback vor absoluten Wahrheitsanspruch zu haben, oder lässt es auch andere Lösungen und Perspektiven zu?",
                    "checked": false
                }
            ]
        }
    },
    "task": {
        "isVisible": false,
        "content": "# Code Review zur Übungsaufgabe Birding App\n\nBitte fertigen Sie ein *Code Review* für den Lösungsvorschlag in diesem Repository an. Konzentrieren Sie sich auf die qualitativen Aspekte des Quellcodes und des *Software Designs*. Sie müssen den Code nicht ausführen und keine funktionalen Fehler oder Bugs indentifizieren. Versuchen Sie, konstruktives Feedback zur besseren Gestaltung der Teilkomponenten und Funktionen bzw. zur allgemeine Optimierung der Codequalität zu geben. Suchen Sie nach offensichtlichen Verstößen gegen bekannte Regeln zur Gestaltung und Formatierung von JavaScript-Code und identifizieren Sie [unsaubere Lösungen](https://www.martinfowler.com/bliki/CodeSmell.html), die sich negativ auf den Gesamteindruck auswirken. Vergessen Sie dabei nicht, auch positives Feedback zu geben und gelungene Stellen un Umsetzungen zu kennzeichnen.\n\n**Machen Sie sich keine Sorgen über die Qualität Ihres Feedbacks. In der Regel sind alle Hinweise und Ratschläge nützlich. Das Anfertigen des Reviews soll nicht nur den EmpfängerInnen helfen, sonder auch eine Übungsmöglichkeit für Sie selbst darstellen. Nutzen Sie die Chance, wertvolle Erfahrungen für spätere Projekte zu sammeln.**\n\n\n# Kontext: Aufgabenstellung zur Übungsaufgabe Briding App\n\nVom 8. bis 10. Mai fand die jährliche _Stunde der Gartenvögel_ statt. Bei [dieser Aktion](https://www.nabu.de/tiere-und-pflanzen/aktionen-und-projekte/stunde-der-gartenvoegel/index.html) des [NABU](https://www.nabu.de/) und des [LBV](https://www.lbv.de/) werden deutschlandweit Statistiken zur Populationsgröße heimischer Vogelarten erhoben. In dieser Aufgabe implementieren Sie eine Webanwendung, die ornithologisch begeisterten NutzerInnen die Teilnahme an der nächsten Vogelzählung erleichtern wird. Die Anwendung stellt 15 der häufigsten heimischen Vogelarten in einer durchsuchbaren Liste dar und erlaubt das Zählen einzelner Exemplare.\n\n#### Darstellung der fertigen Anwendung\n\n![GIF der fertigen Anwendung](https://git.uni-regensburg.de/multimedia-engineering/mme-online/-/raw/master/docs/Aufgaben/img/screencast-birding-app.gif)\n\n\n## Anforderungen und Anwendungsbeschreibung\n\nVersuchen Sie die folgenden Features möglichst komplett und fehlerfrei umzusetzen. Achten Sie dabei darauf, die vorgeschlagenen Architektur und die Aufgabenverteilung bezüglich der Modulstruktur einzuhalten. Vermeiden Sie fehlerhafte Implementierungen und stellen Sie eine funktionierende Bedienung der Anwendung sicher. Denken Sie daran, dass auch die qualitative Gestaltung des Quellcodes in die Bewertung einfließt.\n\nDie komplette HTML-Struktur sowie die notwendigen CSS-Regeln sind vorgegeben. Bei der Implementierung der Anwendung können Sie sich auf die Erstellung der notwendigen JavaScript-Module konzentrieren.\n\n#### A1) Auswahlliste mit Vogelarten\n\nIm linken Bereich der Anwendung findet sich eine Auswahlliste (Selektor: `.bird-gallery`) aller in der App bekannten Vogelarten. Die Arten sind über ein Suchfeld oberhalb der Liste filterbar, wobei die Eingabe als Such- bzw. Filterkriterium für die Artnamen verwendet wird. Ist das Feld leer, wird die komplette Liste angezeigt. Gibt der Nutzer Text ein, wird mit jeder Änderung überprüft, ob der eingegebene String in einem der Artnamen vorkommt. Angezeigt werden dann alle Arten, auf die dieses Kriterium zutrifft.\n\nÜber die Liste kann der Benutzer Vogelarten auswählen. Dazu klickt er auf das entsprechende _Plus_-Symbol des jeweiligen Listeneintrags. Die so selektierte Art wird in das *Dashboard* aufgenommen.\n\n#### A2) Dashboard mit beobachteten Vogelarten\n\nIm *Dashboard* (Selektor: `.bird-counter`) - rechts von der Auswahlliste - werden alle Vogelarten dargestellt, die bereits über die Liste ausgewählt wurden. Im *Template* werden zwei als Interaktionselemente zu verwendende Bereiche definiert: `<span class=\"bird-counter-decrease button\">` und `<span class=\"bird-counter-increase button\">`. Diese dienen zum Zählen der beobachteten Vögel.\n\n\n## Code-Struktur der Anwendung\n\nDie Code-Struktur der fertigen Anwendung soll weit möglichst dem [Separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns)-Ansatz folgen und dabei das [model-view-controller](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)-Muster umsetzen. Die unterschiedlichen Aufgabenbereiche werden dabei durch separate ES6-Module abgebildet.\n\n#### BirdingApp | `index.js`\n\nDieses Modul dient als zentrale Komponente der Anwendung. Beim Start werden die anderen Bestandteile der Anwendung hier initialisiert. Zur Laufzeit steuert das Modul die Kommunikation zwischen den übrigen Programmbestandteilen. Diese sind im Optimalfall unabhängig voneinander und geben nötige Informationen an das zentrale Modul weiter bzw. werden von diesem informiert und gesteuert.\n#### BirdingModel | `BirdingModel.js`\n\nDas Model der Anwendung speichert den aktuellen Zustand der App. Hier wird die Liste der verfügbaren Vogelarten gespeichert und bereit gestellt. Andere Komponenten können mit dem Model über ein öffentliches Interface kommunizieren.\n\n#### BirdingController | `BirdingController.js`\n\nDer *Controller* fängt alle relevanten Benutzerinteraktionen ab und gibt die damit verbundene Informationen weiter. Hierzu zählen die Nutzereingaben im Suchfeld, die Auswahl eines Eintrags aus der Auswahlliste sowie die Veränderung des *Counters* der im *Dashboard* aufgeführten Vogelarten.\n\n#### Views | `BirdCounterView.js` und `BirdListView.js`\n\nDie beide *Views* der Anwendung rendern die im *Model* gespeicherten Informationen für die Darstellung im *User Interface*. Beide Module stellen eine öffentliche Schnittstelle zur Verfügung, die es erlaubt, neue Einträge zum *View* hinzuzufügen. Der `BirdCounterView` verfügt zusätzlich über die Möglichkeit, bereits vorhandenen Einträge zu aktualisieren. Die *Views* repräsentieren immer den aktuellen Stand der *Anwendung*, der sich aus den im Model gespeicherten Informationen ergibt.\n\n## Weitere Hinweise und Hilfestellungen\n\n- Über die Notwendigkeit qualitiativ hochwertigen Quellcodes schreibt Martin Fowler [hier](https://martinfowler.com/articles/is-quality-worth-cost.html)\n- Weitere Informationen zum Verfassen von Code-Reviews finden sie in der [Google Engineering Practives documentation](https://google.github.io/eng-practices/review/reviewer/standard.html)"          
    },
    "content": {
        "currentFile": "fileSha0000",
        "commentCategories": [
            {
                "text": "Bug",
                "color": "red",
                "value": "1"
            },
            {
                "text": "Alternative",
                "color": "orange",
                "value": "2"
            },
            {
                "text": "Anmerkung",
                "color": "blue",
                "value": "3"
            },
            {
                "text": "Kompliment",
                "color": "green",
                "value": "4"
            }
        ],
        "files": {
            "fileSha0000": {
                "sha": "fileSha0000",
                "path": "src/js/Appserver.js",
                "text": "/* globals Vue, VueCodemirror, SemanticUIVue */\nimport ChecklistComponent from \"./components/checklist.js\";\nimport CodeEditorComponent from \"./components/code-editor.js\";\nimport CommentsDisplayComponent from \"./components/comments-display.js\";\nimport FaqComponent from \"./components/faq.js\";\nimport TaskComponent from \"./components/task.js\";\nimport TreeViewComponent from \"./components/tree-view.js\";\nimport store from \"./model/store.js\";\n\nVue.use(VueCodemirror);\nVue.use(SemanticUIVue);\n\n// eslint-disable-next-line no-new\nnew Vue({\n    el: \"#app\",\n    components: {\n        \"code-editor\": CodeEditorComponent,\n        \"comments-display\": CommentsDisplayComponent,\n        \"tree-view\": TreeViewComponent,\n        \"checklist\": ChecklistComponent,\n        \"faq-modal\": FaqComponent,\n        \"task-modal\": TaskComponent,\n    },\n    data: {\n        sharedState: store.state,\n        exitConfirmationIsVisible: false,\n    },\n    methods: {\n        toggleChecklist() {\n            store.toggleChecklistVisibility();\n        },\n        showFaq() {\n            store.toggleFaqVisibility();\n        },\n        showTask() {\n            store.toggleTaskVisibility();\n        },\n        toggleExitConfirmation() {\n            this.exitConfirmationIsVisible = !this.exitConfirmationIsVisible;\n        },\n        exit() {\n            location.href = \"./\";\n        },\n    },\n    mounted() {\n        document.querySelector(\"#loader\").style.display = \"none\";\n        document.querySelector(\"#app\").style.display = \"block\"; \n    },\n});",
                "linePresentationModifiers": [
                    {
                        "class": "unchanged_line",
                        "lines": [0,1,2,3,55]
                    }
                ],
                "activeCommentSection": null, 
                "comments": 
                [
                    {
                        "id": "10001",
                        "sectionId": "1",
                        "authorId": "2",
                        "authorAvatarUrl": "https://i.kym-cdn.com/photos/images/original/001/474/942/012.gif",
                        "authorUrl": "https://i.imgflip.com/40ga2o.jpg",
                        "authorName": "Winnie",
                        "content": "Morning my Friend",
                        "categoryId": "2"
                    },
                    {
                        "id": "10002",
                        "sectionId": "1",
                        "authorId": "12",
                        "authorAvatarUrl": "https://www.kindpng.com/picc/m/28-287073_elonlol-discord-emoji-elon-musk-laughing-deer-hd.png",
                        "authorName": "Elon",
                        "content": "I am gonna write a **super long** and not at all helpful comment because i am a ~~dick~~ and i want to destroy this `holes tool` career.",
                        "categoryId": "1"
                    },
                    {
                        "id": "10003",
                        "sectionId": "3",
                        "authorId": "12",
                        "authorAvatarUrl": "https://www.kindpng.com/picc/m/28-287073_elonlol-discord-emoji-elon-musk-laughing-deer-hd.png",
                        "authorName": "Elon",
                        "content": "Coding is not hard.",
                        "categoryId": "4"
                    },
                    {
                        "id": "10004",
                        "sectionId": "54",
                        "authorId": "2",
                        "authorAvatarUrl": "https://i.kym-cdn.com/photos/images/original/001/474/942/012.gif",
                        "authorUrl": "https://i.imgflip.com/40ga2o.jpg",
                        "authorName": "Winnie",
                        "content": "Side-Comments is not coded well.",
                        "categoryId": "1"
                    }
                ]
            },
            "fileSha0001": {
                "sha": "fileSha0001",
                "path": "src/js/SideComments.js",
                "text": "",
                "linePresentationModifiers": [
                    {
                        "class": "unchanged_line",
                        "lines": [0,1,2,3,4,5,6,7,8,9,10]
                    },
                    {
                        "class": "halloween_line",
                        "lines": [0,6,7,8,9,10,11,12,13,14]
                    }
                ],
                "activeCommentSection": "2",
                "comments": [
                    {
                        "id": "20001",
                        "sectionId": "2",
                        "authorId": "1111",
                        "authorAvatarUrl": "https://media.vanityfair.com/photos/5c2fdb09ef10e32ca1332862/1:1/w_1420,h_1420,c_limit/trumpshutdownraises.jpg",
                        "authorName": "Trump",
                        "content": "What's up with you?",
                        "categoryId": "3"
                    },
                    {
                        "id": "20002",
                        "sectionId": "12",
                        "authorId": "123",
                        "authorName": "Monkey D. Ruffy",
                        "content": "Why would you delete this?",
                        "categoryId": "2"
                    },
                    {
                        "id": "20003",
                        "sectionId": "12",
                        "authorId": "123",
                        "authorName": "Monkey D. Ruffy",
                        "content": "ID3 lol",
                        "categoryId": "2"
                    }
                ]
            },
            "fileSha0002": {
                "sha": "fileSha0002",
                "path": "src/test.htm",
                "text": "<!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>HTMLHint</title>\n</head>\n<body>\n  <div>\"HTMLHint\": help your html code better\n</body>\n</html>",
                "linePresentationModifiers": [],
                "activeCommentSection": null,
                "comments": []
            },
            "fileSha0003": {
                "sha": "fileSha0003",
                "path": "src/test.css",
                "text": "",
                "linePresentationModifiers": [],
                "activeCommentSection": null,
                "comments": []
            }
        },
        "filetree": {
            "name": "src",
            "isOpen": true,
            "children": [
                { "sha": "undefined", "name": "test.html", "isModified": false},
                { "sha": "fileSha0002", "name": "test.htm", "isModified": true},
                { "sha": "fileSha0003", "name": "test.css", "isModified": true},
                { "sha": "undefined", "name": "test.txt", "isModified": false},
                {
                    "name": "js",
                    "isOpen": false,
                    "children": [
                        { "sha": "fileSha0000", "name": "AppServer.js", "isModified": true},
                        { "sha": "fileSha0001", "name": "SideComments.js", "isModified": false}
                    ]
                },
                {
                    "name": "test",
                    "isOpen": false,
                    "children": [
                        { "sha": "undefined", "name": "test.js", "isModified": false},
                        { "sha": "testfile0000", "name": "testfile.js", "isModified": false},
                        {
                            "name": "emptyFolder", "isOpen": false, "children": []
                        }
                    ]
                }
            ]
        }
    },
    "editor": {
        "activeTheme": "gruvbox-dark",
        "themes": [
            "default","gruvbox-dark","monokai","seti","idea","the-matrix"
        ]
    }
}